// Generated by dojo-bindgen on Mon, 8 Jul 2024 11:09:54 +0000. Do not modify this file manually.
using System;
using Dojo;
using Dojo.Starknet;
using System.Reflection;
using System.Linq;
using System.Collections.Generic;
using Enum = Dojo.Starknet.Enum;
using UnityEngine;

// Type definition for `dojo_examples::models::Vec2` struct
[Serializable]
public struct Vec2
{
    public uint x;
    public uint y;
}

// Type definition for `core::option::Option::<core::integer::u32>` enum
public abstract record Option<A>() : Enum
{
    public record Some(A value) : Option<A>;
    public record None() : Option<A>;
}


namespace dojo_examples
{
    // Model definition for `dojo_examples::models::Position` model
    public class Position : ModelInstance
    {
        [ModelField("player")]
        public FieldElement player;

        [ModelField("vec")]
        public Vec2 position;

        // component fields
        public TextMesh textTag;
        public string shortPlayerAddress;

        void Start()
        {
            var target = new Vector3(position.x, 0, position.y);
            gameObject.transform.position = target;
        }

        void Update()
        {
            // our curent position is gameObject.transform.position
            // move towards the target position
            var step = 3.0f * Time.deltaTime;
            // scale down our positions
            Vector3 oldPosition = gameObject.transform.position;
            var target = new Vector3(position.x, oldPosition.y, position.y);
            gameObject.transform.position = Vector3.MoveTowards(gameObject.transform.position, target, step);

            // if we are close enough to the target position, snap to it
            if (Vector3.Distance(gameObject.transform.position, target) < 0.001f)
            {
                gameObject.transform.position = target;
            }
        }
    }
}

